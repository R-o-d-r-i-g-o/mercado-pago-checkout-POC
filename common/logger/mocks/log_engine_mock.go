// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	logger "code-space-backend-api/common/logger"
	field "code-space-backend-api/common/logger/field"

	mock "github.com/stretchr/testify/mock"
)

// LogEngine is an autogenerated mock type for the LogEngine type
type LogEngine struct {
	mock.Mock
}

// Debug provides a mock function with given fields: message, fields
func (_m *LogEngine) Debug(message string, fields ...field.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: err, fields
func (_m *LogEngine) Error(err error, fields ...field.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, err)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: message, fields
func (_m *LogEngine) Info(message string, fields ...field.Field) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// SyncLogs provides a mock function with given fields:
func (_m *LogEngine) SyncLogs() {
	_m.Called()
}

// WithContext provides a mock function with given fields: ctx
func (_m *LogEngine) WithContext(ctx context.Context) logger.LogEngine {
	ret := _m.Called(ctx)

	var r0 logger.LogEngine
	if rf, ok := ret.Get(0).(func(context.Context) logger.LogEngine); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.LogEngine)
		}
	}

	return r0
}

type mockConstructorTestingTNewLogEngine interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogEngine creates a new instance of LogEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogEngine(t mockConstructorTestingTNewLogEngine) *LogEngine {
	mock := &LogEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}
